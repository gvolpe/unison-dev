namespace com.gvolpe.miniblog.api

Post.example =
  Post.Post
    "blog post body"
    "Ada Lovelace"
    "@ada"
    "2021-01-01T00:00:00Z"

use Parser / s

createPost : '{Route, Exception, Log} ()
createPost = do
  userHandle = Route.route POST (s "api" / s "users" / Parser.text / s "posts")
  body = request.body.decodeJson CreatePost.fromJson
  warn "Creating new post" []
  ok.json (PostId.toJson (BlogPostId "IAmAPostId"))

getUserPosts : '{Route, Log} ()
getUserPosts = do
  userId = Route.route GET (s "api" / s "users" / Parser.text / s "posts")
  info "Getting user posts for ðŸ‘‡" [("userId", userId)]
  ok.json (Posts.toJson [Post.example])

getPostById : '{Route, Exception, Log} ()
getPostById = do
  postId = BlogPostId (Route.route GET (s "api" / s "posts" / Parser.text))
  info "Get post for ðŸ‘‡" [("id", PostId.value postId)]
  ok.json (Post.toJson Post.example)

createUser : AppStorage -> '{Exception, Log, Random, Remote, Route, Storage} ()
createUser storage = do
  Route.noCapture POST (s "api" / s "users")
  user = request.body.decodeJson User.fromJson
  avatarURI = Optional.flatMap URI.parseOptional (User.avatar user)
  userName' = User.name user
  userHandleText = User.userHandle user
  dbUserHandle = com.gvolpe.miniblog.db.v1.UserHandle.UserHandle userHandleText
  info "Creating user with ðŸ‘‡" [("handle", userHandleText)]
  OrderedTable.write
    (userHandleToUser storage)
    dbUserHandle
    (UserRow.UserRow dbUserHandle userName' avatarURI)
  ok.json (UserId.toJson <| UserId.UserId userHandleText)

getUserFeedById : '{Route, Log} ()
getUserFeedById = do
  userId = Route.route GET (s "api" / s"users" / Parser.text / s "feed")
  info "Getting user feed for ðŸ‘‡" [("userId", userId)]
  ok.json (Posts.toJson [Post.example])

getUserFeedByHandle : '{Route, Log} ()
getUserFeedByHandle = do
  userHandle = Route.route GET (s "api" / s"users" / Parser.text / s "feed")
  info "Getting user feed for ðŸ‘‡" [("handle", userHandle)]
  ok.json (Posts.toJson [Post.example])
